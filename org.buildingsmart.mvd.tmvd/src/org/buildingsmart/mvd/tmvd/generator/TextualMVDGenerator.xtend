/*
 * generated by Xtext
 */
package org.buildingsmart.mvd.tmvd.generator

import java.io.IOException
import java.util.Collections
import org.buildingsmart.mvd.mvdxml.MvdXML
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMLResourceFactoryImpl
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import java.util.Collection
import java.util.Map
import java.util.HashMap
import org.eclipse.emf.ecore.xmi.XMLResource

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TextualMVDGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		val mvdXML = resource.allContents.findFirst[e|e instanceof MvdXML] as MvdXML;

		//		mvdXML.storeAsXMI("/src-gen/" + mvdXML.name + ".mvdxml")
		System::out.println("/src-gen/" + mvdXML.name.sanitizeMvdName + ".mvdxml" + " " + resource.toString)

		mvdXML.storeAsXMI("door.self.closing/src-gen/" + mvdXML.name + ".mvdxml")

	}

	def sanitizeMvdName(String name) {
		name.substring(1, name.length - 1)
	}

	def storeAsXMI(EObject eObject, String fileName) {

		// Obtain a new resource set
		//
		val resSet = new ResourceSetImpl();

		// Register the P21 resource factory for the .mvdxml extension
		//
		resSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("mvdxml", new XMLResourceFactoryImpl());

		// Get the resource
		//
		val resource = resSet.createResource(URI.createPlatformResourceURI(fileName, true));
		resource.getContents().add(eObject);

		// Save the contents of the resource to the file system.
		val options = new HashMap<String, Object>();
		options.put(XMLResource.OPTION_ENCODING, "UTF8");

		try {
			resource.save(options);
		} catch (IOException exception) {
			exception.printStackTrace
		}
	}

	def compile(MvdXML mvdXML) {
		''''''
	}
}
