grammar org.buildingsmart.mvd.tmvd.TextualMVD with org.eclipse.xtext.common.Terminals hidden(WS)

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://buildingsmart-tech.org/mvd/XML/1.1"

MvdXML returns MvdXML:
	'@' 'UUID' LPAREN uuid=UUID RPAREN?
	'mvd' name=ID
	('author' author=STRING)?
	('code' code=NORMALIZED_STRING)?
	('copyright' copyright=STRING)?
	('owner' owner=NORMALIZED_STRING)?
	('status' status=StatusLiterals)?
	('version' version=NORMALIZED_STRING)?
	('templates' templates=Templates)?
	('views' views=Views)?;

	/**
 * A list of reusable concept templates, mvd:ConceptTemplate, that define the graph
 * within the base IFC schema representing the entities and attributes needed to support the functional
 * unit addressed by the concept
 */
Templates returns TemplatesType:
	LCURLY conceptTemplate+=ConceptTemplate (conceptTemplate+=ConceptTemplate)* RCURLY;

Views returns ViewsType:
	LCURLY modelView+=ModelView (COMMATA modelView+=ModelView)* RCURLY;

AnyURI returns type::AnyURI:
	'AnyURI' STRING;

ConceptTemplate returns ConceptTemplate:
	'@' 'UUID' LPAREN uuid=UUID RPAREN
	name=ID EQUAL 'ConceptTemplate' LCURLY
	('applicableEntity' ':' applicableEntity=APPLICABLE_ENTITY_TYPE)?
	'applicableSchema' ':' applicableSchema=APPLICABLE_SCHEMA_TYPE
	('author' author=NORMALIZED_STRING)?
	('code' code=NORMALIZED_STRING)?
	('copyright' copyright=AnyURI)?
	('isPartial' isPartial=Boolean)?
	('owner' owner=NORMALIZED_STRING)?
	('status' status=StatusLiterals)?
	('version' version=NORMALIZED_STRING)?
	('definitions' definitions=Definitions)?
	('def' 'rules' ':' rules=RulesType)?
	('def' 'subTemplates' ':' subTemplates=SubTemplates)?
	RCURLY;

Definitions returns Definitions:
	LBRACKET definition+=Definition (COMMATA definition+=Definition)* RBRACKET;

RulesType returns RulesType:
	LBRACKET attributeRule+=AttributeRule (COMMATA attributeRule+=AttributeRule)* RBRACKET;

SubTemplates returns SubTemplatesType:
	LBRACKET conceptTemplate+=ConceptTemplate (COMMATA conceptTemplate+=ConceptTemplate)* RBRACKET;

APPLICABLE_ENTITY_TYPE returns type::NormalizedString:
	ID;

APPLICABLE_SCHEMA_TYPE returns type::NormalizedString:
	SCHEMA_NAME;

Boolean returns type::Boolean:
	'true' | 'false';

Definition returns DefinitionType:
	{DefinitionType}
	LCURLY
	('body' body=Body)?
	('link' LCURLY link+=Link (COMMATA link+=Link)* RCURLY)?
	RCURLY;

Body returns BodyType:
	{BodyType}
	LCURLY
	('value' value=STRING)?
	('lang' lang=LANGUAGE)?
	('tags' tags=TAGS_TYPE)?
	RCURLY;

Link returns LinkType:
	LCURLY
	('category' category=CategoryLiterals)?
	'href' href=AnyURI
	('lang' lang=LANGUAGE)?
	('title' title=NORMALIZED_STRING)?
	RCURLY;

AttributeRule returns AttributeRule:
	(description=ML_COMMENT)?
	('@' 'RuleID' LPAREN ruleID=ID RPAREN)?
	'attr' name=ID
	('with' 'constraints' constraints=Constraints)?
	(LCURLY entityRules=EntityRules RCURLY)?;

EntityRules returns EntityRulesType:
	entityRule+=EntityRule (COMMATA entityRule+=EntityRule)*;

EntityRule returns EntityRule:
	(description=ML_COMMENT)?
	('@' 'RuleID' LPAREN ruleID=ID RPAREN)?
	'entity' name=ID LCURLY
	('reference' references=References)?
	(attributeRules=AttributeRules)?
	('with' 'constraints' constraints=Constraints)?
	RCURLY;

References returns ReferencesType:
	LCURLY
	'template' template=GenericReference
	('prefix' idPrefix=ID)?
	RCURLY;

AttributeRules returns AttributeRulesType:
	attributeRule+=AttributeRule (attributeRule+=AttributeRule)*;

Constraints returns ConstraintsType:
	LBRACKET constraint+=Constraint (constraint+=Constraint)* RBRACKET;

Constraint returns ConstraintType:
	'=>' expression=STRING ';';

ModelView returns ModelView:
	'@' 'UUID' LPAREN uuid=UUID RPAREN
	name=ID EQUAL 'ModelView' LCURLY
	'applicableSchema' EQUAL applicableSchema=SCHEMA_NAME
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=STRING)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusLiterals)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	('baseView' EQUAL baseView=GenericReference)?
	('exchangeRequirements' EQUAL exchangeRequirements=ExchangeRequirements)?
	('roots' EQUAL => roots=Roots)?
	RCURLY;

GenericReference returns GenericReference:
	{GenericReference}
	('href' href=AnyURI)?
	('ref' ref=[ConceptTemplate|ID])?;

ExchangeRequirements returns ExchangeRequirementsType:
	LBRACKET exchangeRequirement+=ExchangeRequirement (COMMATA exchangeRequirement+=ExchangeRequirement)* RBRACKET;

Roots returns RootsType:
	LBRACKET conceptRoot+=ConceptRoot (COMMATA conceptRoot+=ConceptRoot)* RBRACKET;

ExchangeRequirement returns ExchangeRequirementType:
	'@' 'UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ExchangeRequirement' '=>'
	LBRACKET
	('applicability' EQUAL applicability=Applicability)?
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusLiterals)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	RBRACKET;

	/**
 * An ConceptRoot references a specific IFC entity, e.g. IfcWall, representing a 
 * major and individually testable model element in a MVD
 */
ConceptRoot returns ConceptRoot:
	'@' 'UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ConceptRoot' '=>'
	LBRACKET
	('applicableRootEntity' EQUAL applicableRootEntity=ID)?
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusLiterals)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	('applicability' EQUAL applicability=ApplicabilityType)?
	('concepts' EQUAL concepts=Concepts)?
	RBRACKET;

	/**
 * It optionally applies additional constraints on the applicable entity that needs to be 
 * fulfilled by the entity instance before the Concepts are validated.
 */
ApplicabilityType returns ApplicabilityType:
	'Applicability'
	LCURLY
	('definitions' definitions=Definitions)?
	'template' template=GenericReference
	'templateRules' templateRules=TemplateRules
	RCURLY;

Concepts returns ConceptsType:
	LBRACKET concept+=Concept (COMMATA concept+=Concept)* RBRACKET;

TemplateRules returns TemplateRules:
	{TemplateRules}
	LCURLY
	('operator' ':' operator=OperatorLiterals)?
	('description' description=STRING)?
	('templates' ':' LBRACKET templateRules+=TemplateRules (COMMATA templateRules+=TemplateRules)* RBRACKET)?
	('templates2' ':' LBRACKET templateRule+=TemplateRule (COMMATA templateRule+=TemplateRule)* RBRACKET)?
	RCURLY;

TemplateRule returns TemplateRuleType:
	LCURLY
	('description' description=STRING)?
	'check' parameters=STRING
	RCURLY;

	/**
 * describe template rules for common subsets of information (e.g. material usage) 
 * within the context of the particular concept root
 */
Concept returns Concept:
	'@' 'UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'Concept' '=>'
	LBRACKET
	('author' EQUAL author=NORMALIZED_STRING)?
	('baseConcept' EQUAL baseConcept=UUID)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('override' EQUAL override=Boolean)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusLiterals)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	'template' EQUAL template=GenericReference
	('requirements' EQUAL requirements=Requirements)?
	'templateRules' EQUAL templateRules=TemplateRules
	RBRACKET;

Requirements returns Requirements:
	LBRACKET requirement+=Requirement (COMMATA requirement+=Requirement)* RBRACKET;

Requirement returns Requirement:
	requirement=RequirementLiterals 'Requirement'
	LCURLY
	('value' value=STRING)?
	('applicability' applicability=Applicability)?
	'exchangeRequirement' => exchangeRequirement=[ExchangeRequirementType|ID]
	RCURLY;

enum Applicability returns Applicability:
	export='export' | ^import='import' | both='both';

enum RequirementLiterals returns RequirementType:
	mandatory='mandatory' | recommended='recommended' | notRelevant='notRelevant' | notRecommended='notRecommended' |
	excluded='excluded' | optional='optional';

enum OperatorLiterals returns OperatorType:
	and='and' | or='or' | not='not' | nand='nand' | nor='nor' | xor='xor' | nxor='nxor';

enum CategoryLiterals returns CategoryType:
	definition='definition' | agreement='agreement' | diagram='diagram' | instantiation='instantiation' |
	example='example';

enum StatusLiterals returns StatusType:
	sample='sample' | proposal='proposal' | draft='draft' | candidate='candidate' | final='final' |
	deprecated='deprecated' | noStatus='noStatus';

NORMALIZED_STRING returns type::NormalizedString:
	STRING;

LANGUAGE returns type::Language:
	STRING;

TAGS_TYPE returns TagsType:
	STRING;

SCHEMA_NAME returns SchemaName:
	'IFC4' | 'IFC2X3';

terminal UUID:
	HEX_OCTED_4 "-" HEX_OCTED_2 "-" HEX_OCTED_2 "-" HEX_OCTED HEX_OCTED "-" HEX_OCTED_6;

terminal fragment HEX_OCTED_6:
	HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED;

terminal fragment HEX_OCTED_2:
	HEX_OCTED HEX_OCTED;

terminal fragment HEX_OCTED_4:
	HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED;

terminal fragment HEX_OCTED:
	HEX_DIGIT HEX_DIGIT;

terminal fragment HEX_DIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');

terminal EQUAL:
	'=';

terminal LBRACKET:
	'[';

terminal RBRACKET:
	']';

terminal COMMATA:
	',';

terminal LCURLY:
	'{';

terminal RCURLY:
	'}';

terminal LPAREN:
	'(';

terminal RPAREN:
	')';
	