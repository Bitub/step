grammar org.buildingsmart.mvd.tmvd.TextualMVD with org.eclipse.xtext.common.Terminals hidden(WS)

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://buildingsmart-tech.org/mvdXML/mvdXML1-1"

MvdXML returns MvdXML:
	('author' author=STRING)?
	('code' code=NORMALIZED_STRING)?
	('copyright' copyright=STRING)?
	('owner' owner=NORMALIZED_STRING)?
	('status' status=StatusType)?
	('version' version=NORMALIZED_STRING)?
	('@UUID' LPAREN uuid=UUID RPAREN)?
	'mvd' name=ID
	';'
	('def' 'templates' ':' templates=TemplatesType 'end')?
	('def' 'views' ':' views=ViewsType 'end')?;

TemplatesType returns TemplatesType:
	conceptTemplate+=ConceptTemplate ("," conceptTemplate+=ConceptTemplate)*;

ViewsType returns ViewsType:
	modelView+=ModelView ("," modelView+=ModelView)*;

AnyURI returns type::AnyURI:
	'AnyURI' STRING;

ConceptTemplate returns ConceptTemplate:
	'@UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ConceptTemplate' '=>'
	'['
	('applicableEntity' applicableEntity=APPLICABLE_ENTITY_TYPE)?
	'applicableSchema' applicableSchema=APPLICABLE_SCHEMA_TYPE
	('author' author=NORMALIZED_STRING)?
	('code' code=NORMALIZED_STRING)?
	('copyright' copyright=AnyURI)?
	('isPartial' isPartial=Boolean)?
	('owner' owner=NORMALIZED_STRING)?
	('status' status=StatusType)?
	('version' version=NORMALIZED_STRING)?
	('definitions' definitions=Definitions)?
	('def' 'rules' ':' rules=RulesType 'end')?
	('def' 'subTemplates' ':' subTemplates=SubTemplatesType 'end')?
	']';

Definitions returns Definitions:
	'[' definition+=DefinitionType ("," definition+=DefinitionType)* ']';

RulesType returns RulesType:
	attributeRule+=AttributeRule (attributeRule+=AttributeRule)*;

SubTemplatesType returns SubTemplatesType:
	conceptTemplate+=ConceptTemplate ("," conceptTemplate+=ConceptTemplate)*;

APPLICABLE_ENTITY_TYPE returns type::NormalizedString:
	ID;

APPLICABLE_SCHEMA_TYPE returns type::NormalizedString:
	SCHEMA_NAME;

Boolean returns type::Boolean:
	'true' | 'false';

DefinitionType returns DefinitionType:
	{DefinitionType}
	'{'
	('body' body=BodyType)?
	('link' '{' link+=LinkType ("," link+=LinkType)* '}')?
	'}';

BodyType returns BodyType:
	{BodyType}
	'{'
	('value' value=STRING)?
	('lang' lang=LANGUAGE)?
	('tags' tags=TAGS_TYPE)?
	'}';

LinkType returns LinkType:
	'{'
	('category' category=CategoryType)?
	'href' href=AnyURI
	('lang' lang=LANGUAGE)?
	('title' title=NORMALIZED_STRING)?
	'}';

AttributeRule returns AttributeRule:
	(description=ML_COMMENT)?
	'attr' name=ID
	('ruleID' ruleID=ID)?
	(entityRules=EntityRulesType)?
	('def' 'constraints' ':' constraints=ConstraintsType 'end')?
	'end';

EntityRulesType returns EntityRulesType:
	entityRule+=EntityRule ("," entityRule+=EntityRule)*;

EntityRule returns EntityRule:
	(description=ML_COMMENT)?
	'entity' name=ID
	('reference' references=ReferencesType)?
	(attributeRules=AttributeRulesType)?
	('def' 'constraints' ':' constraints=ConstraintsType 'end')?
	('ruleID' ruleID=ID)?
	'end';

ReferencesType:
	'{'
	'template' template=GenericReference
	('prefix' idPrefix=NORMALIZED_STRING)?
	'}';

AttributeRulesType returns AttributeRulesType:
	attributeRule+=AttributeRule ("," attributeRule+=AttributeRule)*;

ConstraintsType returns ConstraintsType:
	constraint+=ConstraintType (constraint+=ConstraintType*)?;

ConstraintType:
	expression=STRING;

ModelView returns ModelView:
	'@UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ModelView' '=>'
	'['
	'applicableSchema' EQUAL applicableSchema=SCHEMA_NAME
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=STRING)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusType)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	('baseView' EQUAL baseView=GenericReference)?
	('exchangeRequirements' EQUAL exchangeRequirements=ExchangeRequirementsType)?
	('roots' EQUAL => roots=RootsType)?
	']';

GenericReference returns GenericReference:
	{GenericReference}
	('href' href=AnyURI)?
	('ref' ref=[ConceptTemplate|ID])?;

ExchangeRequirementsType returns ExchangeRequirementsType:
	'[' exchangeRequirement+=ExchangeRequirementType ("," exchangeRequirement+=ExchangeRequirementType)* ']';

RootsType returns RootsType:
	'[' conceptRoot+=ConceptRoot ("," conceptRoot+=ConceptRoot)* ']';

ExchangeRequirementType returns ExchangeRequirementType:
	'@UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ExchangeRequirement' '=>'
	'['
	('applicability' EQUAL applicability=Applicability)?
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusType)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	']';

ConceptRoot returns ConceptRoot:
	'@UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'ConceptRoot' '=>'
	'['
	('applicableRootEntity' EQUAL applicableRootEntity=ID)?
	('author' EQUAL author=NORMALIZED_STRING)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusType)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	('applicability' EQUAL applicability=ApplicabilityType)?
	('concepts' EQUAL concepts=ConceptsType)?
	']';

ApplicabilityType returns ApplicabilityType:
	'Applicability'
	'{'
	('definitions' definitions=Definitions)?
	'template' template=GenericReference
	'templateRules' templateRules=TemplateRules
	'}';

ConceptsType returns ConceptsType:
	'[' concept+=Concept ("," concept+=Concept)* ']';

TemplateRules returns TemplateRules:
	{TemplateRules}
	'TemplateRules'
	'{'
	('description' description=STRING)?
	('operator' operator=OperatorType)? // recursive definition of TemplateRules
	('templateRules' '[' templateRules+=TemplateRules (',' templateRules+=TemplateRules)* ']')?
	('templateRule' '[' templateRule+=TemplateRuleType (',' templateRule+=TemplateRuleType)* ']')?
	'}';

TemplateRuleType returns TemplateRuleType:
	'TemplateRule' '{'
	('description' description=STRING)?
	'parameters' parameters=STRING
	'}';

Concept returns Concept:
	'@UUID' LPAREN uuid=UUID RPAREN
	name=ID ':' 'Concept' '=>'
	'['
	('author' EQUAL author=NORMALIZED_STRING)?
	('baseConcept' EQUAL baseConcept=UUID)?
	('code' EQUAL code=NORMALIZED_STRING)?
	('copyright' EQUAL copyright=AnyURI)?
	('override' EQUAL override=Boolean)?
	('owner' EQUAL owner=NORMALIZED_STRING)?
	('status' EQUAL status=StatusType)?
	('version' EQUAL version=NORMALIZED_STRING)?
	('definitions' EQUAL definitions=Definitions)?
	'template' EQUAL template=GenericReference
	('requirements' EQUAL requirements=Requirements)?
	'templateRules' EQUAL templateRules=TemplateRules
	']';

Requirements returns Requirements:
	'[' requirement+=Requirement ("," requirement+=Requirement)* ']';

Requirement returns Requirement:
	requirement=RequirementType 'Requirement'
	'{'
	('value' value=STRING)?
	('applicability' applicability=Applicability)?
	'exchangeRequirement' => exchangeRequirement=[ExchangeRequirementType|ID]
	'}';

enum Applicability returns Applicability:
	export='export' | ^import='import' | both='both';

enum RequirementType returns RequirementType:
	mandatory='mandatory' | recommended='recommended' | notRelevant='notRelevant' | notRecommended='notRecommended' |
	excluded='excluded' | optional='optional';

enum OperatorType returns OperatorType:
	and='and' | or='or' | not='not' | nand='nand' | nor='nor' | xor='xor' | nxor='nxor';

enum CategoryType returns CategoryType:
	definition='definition' | agreement='agreement' | diagram='diagram' | instantiation='instantiation' |
	example='example';

enum StatusType returns StatusType:
	sample='sample' | proposal='proposal' | draft='draft' | candidate='candidate' | final='final' |
	deprecated='deprecated' | noStatus='noStatus';

NORMALIZED_STRING returns type::NormalizedString:
	STRING;

LANGUAGE returns type::Language:
	STRING;

TAGS_TYPE returns TagsType:
	STRING;

SCHEMA_NAME returns SchemaName:
	'IFC4' | 'IFC2X3';

terminal UUID:
	HEX_OCTED_4 "-" HEX_OCTED_2 "-" HEX_OCTED_2 "-" HEX_OCTED HEX_OCTED "-" HEX_OCTED_6;

terminal HEX_OCTED_6:
	HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED;

terminal HEX_OCTED_2:
	HEX_OCTED HEX_OCTED;

terminal HEX_OCTED_4:
	HEX_OCTED HEX_OCTED HEX_OCTED HEX_OCTED;

terminal HEX_OCTED:
	HEX_DIGIT HEX_DIGIT;

terminal HEX_DIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');

terminal EQUAL:
	'=';

terminal LPAREN:
	'(';

terminal RPAREN:
	')';
	