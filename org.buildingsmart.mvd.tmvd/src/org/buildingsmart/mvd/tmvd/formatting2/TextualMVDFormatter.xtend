/*
 * generated by Xtext
 */
package org.buildingsmart.mvd.tmvd.formatting2;

import com.google.inject.Inject;
import org.buildingsmart.mvd.mvdxml.ApplicabilityType;
import org.buildingsmart.mvd.mvdxml.AttributeRule;
import org.buildingsmart.mvd.mvdxml.AttributeRulesType;
import org.buildingsmart.mvd.mvdxml.Concept;
import org.buildingsmart.mvd.mvdxml.ConceptRoot;
import org.buildingsmart.mvd.mvdxml.ConceptTemplate;
import org.buildingsmart.mvd.mvdxml.ConceptsType;
import org.buildingsmart.mvd.mvdxml.ConstraintType;
import org.buildingsmart.mvd.mvdxml.ConstraintsType;
import org.buildingsmart.mvd.mvdxml.DefinitionType;
import org.buildingsmart.mvd.mvdxml.Definitions;
import org.buildingsmart.mvd.mvdxml.EntityRule;
import org.buildingsmart.mvd.mvdxml.EntityRulesType;
import org.buildingsmart.mvd.mvdxml.ExchangeRequirementType;
import org.buildingsmart.mvd.mvdxml.ExchangeRequirementsType;
import org.buildingsmart.mvd.mvdxml.LinkType;
import org.buildingsmart.mvd.mvdxml.ModelView;
import org.buildingsmart.mvd.mvdxml.MvdXML;
import org.buildingsmart.mvd.mvdxml.ReferencesType;
import org.buildingsmart.mvd.mvdxml.Requirement;
import org.buildingsmart.mvd.mvdxml.Requirements;
import org.buildingsmart.mvd.mvdxml.RootsType;
import org.buildingsmart.mvd.mvdxml.RulesType;
import org.buildingsmart.mvd.mvdxml.SubTemplatesType;
import org.buildingsmart.mvd.mvdxml.TemplateRuleType;
import org.buildingsmart.mvd.mvdxml.TemplateRules;
import org.buildingsmart.mvd.mvdxml.TemplatesType;
import org.buildingsmart.mvd.mvdxml.ViewsType;
import org.buildingsmart.mvd.tmvd.services.TextualMVDGrammarAccess;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.buildingsmart.mvd.mvdxml.MvdXmlPackage
import org.eclipse.emf.ecore.EObject

class TextualMVDFormatter extends AbstractFormatter2 {

	@Inject extension TextualMVDGrammarAccess

	def dispatch void format(MvdXML mvdxml, extension IFormattableDocument document) {
		mvdxml.formatUUID(document)

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(mvdxml.getTemplates(), document);
		format(mvdxml.getViews(), document);
	}

	def dispatch void format(TemplatesType templatestype, extension IFormattableDocument document) {

		for (ConceptTemplate conceptTemplate : templatestype.getConceptTemplate()) {
			format(conceptTemplate, document);
		}
	}

	def dispatch void format(ViewsType viewstype, extension IFormattableDocument document) {

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ModelView modelView : viewstype.getModelView()) {
			format(modelView, document);
		}
	}

	def void formatUUID(EObject object, extension IFormattableDocument document) {
		val uuid = object.regionForKeyword("@UUID")
		System::out.println(uuid.toString())
		uuid.surround[noSpace]
		uuid.prepend[newLine]
		object.regionForFeature(object.eClass.getEStructuralFeature("uuid")).surround[noSpace]
		object.regionForKeyword("(").surround[noSpace]
		object.regionForKeyword(")").prepend[noSpace].append[newLines = 2]

	}

	def dispatch void format(ConceptTemplate concepttemplate, extension IFormattableDocument document) {
		concepttemplate.formatUUID(document)

		//		concepttemplate.regionForKeyword("@UUID").surround[noSpace].prepend[newLine]
		//		concepttemplate.regionForFeature(MvdXmlPackage::eINSTANCE.conceptTemplate_Uuid).surround[noSpace]
		//		concepttemplate.regionForKeyword("(").surround[noSpace]
		//		concepttemplate.regionForKeyword(")").prepend[noSpace].append[newLines = 2]
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(concepttemplate.getDefinitions(), document);
		format(concepttemplate.getRules(), document);
		format(concepttemplate.getSubTemplates(), document);
	}

	def dispatch void format(Definitions definitions, extension IFormattableDocument document) {

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (DefinitionType definition : definitions.getDefinition()) {
			format(definition, document);
		}
	}

	def dispatch void format(RulesType rulestype, extension IFormattableDocument document) {

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AttributeRule attributeRule : rulestype.getAttributeRule()) {
			format(attributeRule, document);
		}
	}

	def dispatch void format(SubTemplatesType subtemplatestype, extension IFormattableDocument document) {

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ConceptTemplate conceptTemplate : subtemplatestype.getConceptTemplate()) {
			format(conceptTemplate, document);
		}
	}

	def dispatch void format(DefinitionType definitiontype, extension IFormattableDocument document) {

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(definitiontype.getBody(), document);
		for (LinkType link : definitiontype.getLink()) {
			format(link, document);
		}
	}

	def dispatch void format(AttributeRule attributerule, extension IFormattableDocument document) {
			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(attributerule.getEntityRules(), document);
			format(attributerule.getConstraints(), document);
		}

		def dispatch void format(EntityRulesType entityrulestype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (EntityRule entityRule : entityrulestype.getEntityRule()) {
				format(entityRule, document);
			}
		}

		def dispatch void format(EntityRule entityrule, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(entityrule.getReferences(), document);
			format(entityrule.getAttributeRules(), document);
			format(entityrule.getConstraints(), document);
		}

		def dispatch void format(ReferencesType referencestype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(referencestype.getTemplate(), document);
		}

		def dispatch void format(AttributeRulesType attributerulestype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (AttributeRule attributeRule : attributerulestype.getAttributeRule()) {
				format(attributeRule, document);
			}
		}

		def dispatch void format(ConstraintsType constraintstype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (ConstraintType constraint : constraintstype.getConstraint()) {
				format(constraint, document);
			}
		}

		def dispatch void format(ModelView modelview, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(modelview.getDefinitions(), document);
			format(modelview.getBaseView(), document);
			format(modelview.getExchangeRequirements(), document);
			format(modelview.getRoots(), document);
		}

		def dispatch void format(ExchangeRequirementsType exchangerequirementstype,
			extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (ExchangeRequirementType exchangeRequirement : exchangerequirementstype.getExchangeRequirement()) {
				format(exchangeRequirement, document);
			}
		}

		def dispatch void format(RootsType rootstype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (ConceptRoot conceptRoot : rootstype.getConceptRoot()) {
				format(conceptRoot, document);
			}
		}

		def dispatch void format(ExchangeRequirementType exchangerequirementtype,
			extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(exchangerequirementtype.getDefinitions(), document);
		}

		def dispatch void format(ConceptRoot conceptroot, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(conceptroot.getDefinitions(), document);
			format(conceptroot.getApplicability(), document);
			format(conceptroot.getConcepts(), document);
		}

		def dispatch void format(ApplicabilityType applicabilitytype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(applicabilitytype.getDefinitions(), document);
			format(applicabilitytype.getTemplate(), document);
			format(applicabilitytype.getTemplateRules(), document);
		}

		def dispatch void format(ConceptsType conceptstype, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (Concept concept : conceptstype.getConcept()) {
				format(concept, document);
			}
		}

		def dispatch void format(TemplateRules templaterules, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (TemplateRules templateRules : templaterules.getTemplateRules()) {
				format(templateRules, document);
			}
			for (TemplateRuleType templateRule : templaterules.getTemplateRule()) {
				format(templateRule, document);
			}
		}

		def dispatch void format(Concept concept, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			format(concept.getDefinitions(), document);
			format(concept.getTemplate(), document);
			format(concept.getRequirements(), document);
			format(concept.getTemplateRules(), document);
		}

		def dispatch void format(Requirements requirements, extension IFormattableDocument document) {

			// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
			for (Requirement requirement : requirements.getRequirement()) {
				format(requirement, document);
			}
		}
	}
	