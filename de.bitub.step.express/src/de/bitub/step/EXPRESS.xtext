/* 
 * Copyright (c) 2015 Torsten Krämer and others (Berlin, Germany).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *  Torsten Krämer - initial implementation and initial documentation
 *  Bernold Kraft - Changes, cross-reference resolving
 *  Sebastian Riemschüssel - add documentation
 */
grammar de.bitub.step.EXPRESS with org.eclipse.xtext.common.Terminals hidden(WS, EXP_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate express "http://www.bitub.de/step/EXPRESS"

/**
 * Root entity is schema itself. It stores all top-level elements, which are:
 * <ul>
 * 	<li>TYPE</li>
 * 	<li>ENTITY</li>
 * 	<li>FUNCTION</li>
 *  <li>RULE</li>
 * </ul> 
 */
Schema:
	'SCHEMA' name=ID SEMICOLON
	types+=Type*
	entities+=Entity*
	funtions+=Function*
	rules+=Rule*
	'END_SCHEMA' SEMICOLON;

	// Qualified IDs are only used inside WHERE rules and DERIVED attributes
QualifiedMember returns ecore::EString:
	('SELF\\')? ID ('.' ID)*;

	// Named types
ExpressConcept:
	Type | Entity;

	// Custom type definition
Type:
	'TYPE' name=ID '=' datatype=DataType SEMICOLON
	('WHERE' (whereRule+=WhereRule SEMICOLON)+)?
	'END_TYPE' SEMICOLON;

Entity:
	'ENTITY' name=ID
	((abstract?='ABSTRACT')? 'SUPERTYPE' 'OF' '('
	('ONEOF' '(' disjointSubtype+=[Entity|ID] (',' disjointSubtype+=[Entity|ID])* ')' |
	subtype+=[Entity|ID] (',' subtype+=[Entity|ID])*) ')')?
	('SUBTYPE' 'OF' '(' supertype+=[Entity|ID] (',' supertype+=[Entity|ID])* ')')?
	SEMICOLON
	(attributes+=Attribute SEMICOLON)*
	('DERIVE' (attributes+=DerivedAttribute SEMICOLON)+)?
	('INVERSE' (attributes+=InverseAttribute SEMICOLON)+)?
	('UNIQUE' (uniqueRule+=UniqueRule SEMICOLON)+)?
	('WHERE' (whereRule+=WhereRule SEMICOLON)+)?
	'END_ENTITY' SEMICOLON;

	// Black box statements which should not be parsed deeply
Blackbox:
	(ID | '<' | '>' | '=' | ':' | '?' | '(' | ')' | ']' | '[' | '\\' | '-' | '+' | '*' | '\'' | STRING | ',' | '|'
	| '.' | INT | '/' | 'SELF\\')+;

	// Attributes
// Nur in Derive wird ein optionaler Select über die Vaterklasse mit
// SELF\ENTITY.attribut ausgeführt.; Hier aber mit aufgenommen (IfcGeometricRepresentationSubContext)
Attribute:
	(self?='SELF\\' (qualifier+=ID '.')+)? name=ID ':' (optional?='OPTIONAL')? (type=DataType);

InverseAttribute returns Attribute:
	(Attribute) 'FOR' opposite=[Attribute|ID];

DerivedAttribute returns Attribute:
	(Attribute) ':=' expression=Blackbox;

Reference:
	(self?='SELF\\' (qualifier+=ID '.')+)? name=ID ':' (optional?='OPTIONAL')? type=[Entity|ID];

Rule:
	'RULE' name=ID 'FOR' target=TypeNameList SEMICOLON
	// beliebige Declartion (z.Bsp. Entity) können hier noch stehen  
	('CONSTANT' (constants+=ConstantVal SEMICOLON)+ 'END_CONSTANT' SEMICOLON)?
	('LOCAL' (localVar+=LocalVar SEMICOLON)+ 'END_LOCAL' SEMICOLON)?
	(statements+=Statement SEMICOLON)*
	('WHERE' (whereRule+=WhereRule SEMICOLON)+)?
	'END_RULE' SEMICOLON;

ConstantVal:
	name=ID ':' type=DataType ':=' expression=Line;

LocalVar:
	varname+=ID (',' varname+=ID)* ':' type=DataType (':=' expression=Line)?;

/**
 * Stand-alone Function Expression, with arguments, return type, defined local variables 
 * and statements inside function body.
 * 
 * @version 2 
 */
FunctionExpression:
	'FUNCTION' name=ID arguments=ParameterList ':' return=DataType SEMICOLON
	('LOCAL' (loacls+=LocalVar SEMICOLON)+ 'END_LOCAL' SEMICOLON)?
	(statements+=Statement SEMICOLON)*
	'END_FUNCTION' SEMICOLON;

Function:
	'FUNCTION' name=ID params=ParameterList ':' returnType=DataType SEMICOLON
	// beliebige Declartion (z.Bsp. Entity) können hier noch stehen  
	('CONSTANT' (constants+=ConstantVal SEMICOLON)+ 'END_CONSTANT' SEMICOLON)? // unused feature in IFC4
	('LOCAL' (localVar+=LocalVar SEMICOLON)+ 'END_LOCAL' SEMICOLON)?
	(statements+=Statement SEMICOLON)*
	'END_FUNCTION' SEMICOLON;

ParameterList:
	'(' formalParam+=FormalParam (SEMICOLON formalParam+=FormalParam)* ')';

FormalParam:
	paramName+=ID (',' paramName+=ID)* ':' type=DataType;

TypeNameList:
	'(' types+=ID (',' types+=ID)* ')';

WhereRule:
	name=ID ':' ((expression=Blackbox) | (interval=Intervall));

UniqueRule:
	(name=ID ':')? attributes+=ID (',' attributes+=ID)*;

BuiltInType:
	BinaryType | LogicalType | BooleanType | RealType | NumberType | IntegerType | StringType;

DataType:
	ReferenceType | CollectionType | EnumType | SelectType | BuiltInType | GenericType;

ReferenceType:
	{ReferenceType}
	instance=[ExpressConcept|ID];

GenericType:
	{GenericType} 'GENERIC' (':' typelabel=ID)?;

	/** 
 	 * Handle collections part of data type.
 	 * 
 	 * <pre>
	 * 	<code>
	 * LIST [1:?] OF UNIQUE IfcOrientedEdge;
	 * LIST [2:?] OF LIST [2:?] OF IfcCartesianPoint;
	 * 
	 * ARRAY [0:UpperIndexOnControlPoints] OF REAL := IfcCartesianPoint
	 * 
	 * SET [1:?] OF IfcPropertySetDefinition;
	 * 	</code>
	 * </pre>
	 * 
	 * IFC4 schema is not using BAG.
 	 */
CollectionType:
	name=('LIST' | 'ARRAY' | 'BAG' | 'SET')
	('[' (lowerBound=INT | lowerRef=[Attribute|ID]) (':' (upperBound=INT | upperRef=[Attribute|ID] | many?='?'))? ']')?
	('OF')? (opt?='OPTIONAL')? (unique?='UNIQUE')? type=DataType;

	/** 
 	 * Handle String part of data type
 	 * <pre>
	 * @code{
	 * STRING(22) FIXED
	 * }
	 * </pre>
 	 */
StringType:
	{StringType} 'STRING' ('(' size=INT ')' (fixed?='FIXED')?)?;

	/** 
 	 * Handle binary part of data type
 	 * <pre>
	 * 	<code>
	 * BINARY(32)
	 * 	</code>
	 * </pre>
 	 */
BinaryType:
	{BinaryType} 'BINARY' ('(' size=INT ')')?;

	/** 
 	 * Handle simple built-in data types
 	 * <pre>
	 * @code{
	 * LOGICAL
	 * BOOLEAN
	 * REAL
	 * NUMBER
	 * INTEGER
	 * }
	 * </pre>
 	 */
LogicalType:
	{LogicalType} 'LOGICAL';

BooleanType:
	{BooleanType} 'BOOLEAN';

RealType:
	{RealType} 'REAL';

NumberType:
	{NumberType} 'NUMBER';

IntegerType:
	{IntegerType} 'INTEGER';

	/**
	 * Handle enumeration part of given data type.
	 * 
	 * <pre>
	 * <code>
	 * ENUMERATION OF (SITE, FACTORY, NOTDEFINED)
	 * </code>
	 * </pre>
	 */
EnumType:
	'ENUMERATION' 'OF' '(' literals+=LiteralType (',' literals+=LiteralType)* ')';

LiteralType:
	name=ID;

	/**
	 * Handle select part of given data type.
	 * 
	 * <pre>
	 * @code{
	 * SELECT(IfcOrganization, IfcPerson, IfcPersonAndOrganization) 	 
	 * }
	 * </pre>
	 */
SelectType:
	'SELECT' '(' select+=[ExpressConcept|ID] (',' select+=[ExpressConcept|ID])* ')';

Line:
	{Line} (text+=(ANY_OTHER))* SEMICOLON;

	// TODO: unused parser rule
Select:
	('SELF\\')? ID;

Intervall:
	'{' expression=Blackbox '}';

Statement:
	IfStatement | SequenceStatement | RepeatStatement | Assignment | EscapeStatement | ReturnStatement | CaseStatement;

SequenceStatement:
	'BEGIN' expression=Blackbox 'END' SEMICOLON;

CaseStatement:
	'CASE' variable+=ID 'OF'
	(slot+=CaseAction)*
	('OTHERWISE' ':' otherwise+=Statement)?
	'END_CASE';

CaseAction:
	value+=QualifiedMember (',' value+=QualifiedMember)* ':' statement=Statement;

ReturnStatement:
	{ReturnStatement} 'RETURN' (expression=Blackbox)?;

EscapeStatement:
	{EscapeStatement} 'ESCAPE';

Assignment:
	assignTo=VarOrAttrib? ':=' expression=Blackbox;

VarOrAttrib:
	SimpleVar | IndexedVar | AttributeVar;

SimpleVar:
	name=ID;

IndexedVar:
	variable=SimpleVar '[' index+=Index (':' index+=Index)* ']';

AttributeVar:
	component+=(SimpleVar | IndexedVar) ('.' component+=(SimpleVar | IndexedVar))+;

Index:
	IndexTerminal;

IndexTerminal:
	{VarLiteral} value=ID | {IntLiteral} value=INT;

IfStatement:
	'IF' condition=Line 'THEN'
	(statements+=Statement SEMICOLON)*
	('ELSE' (elseStatements+=Statement SEMICOLON)+)? 'END_IF';

RepeatStatement:
	'REPEAT' idx=ID ':=' start=Blackbox 'TO' end=Blackbox SEMICOLON
	(statements+=Statement SEMICOLON)* 'END_REPEAT';

terminal SEMICOLON:
	';';

terminal EXP_COMMENT:
	'(*'->'*)';

